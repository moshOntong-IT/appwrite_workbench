import 'package:appwrite_workbench/core/appwrite_client.dart';
import 'package:appwrite_workbench/core/provider_scope_extension.dart';
import 'package:appwrite_workbench/features/functions/presentation/controllers/functions_controller.dart';
import 'package:appwrite_workbench/global_providars.dart';
import 'package:appwrite_workbench/models/project.dart';
import 'package:appwrite_workbench/shared_controllers/runtime_list_controller.dart';
import 'package:dart_appwrite/dart_appwrite.dart';
import 'package:dart_appwrite/models.dart';
import 'package:flutter/material.dart';
import 'package:flutter_hooks/flutter_hooks.dart';
import 'package:gap/gap.dart';
import 'package:hooks_riverpod/hooks_riverpod.dart';
import 'package:shadcn_ui/shadcn_ui.dart';
import 'package:toastification/toastification.dart';

class CreateFunctionDialog extends ConsumerWidget {
  const CreateFunctionDialog(
      {required this.project, required this.client, super.key});

  final AppwriteClient client;
  final ProjectWorkbench project;

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    return const _Main().scope(overrides: [
      appwriteClientProvider.overrideWithValue(
        client,
      ),
      projectSelectedProvider.overrideWithValue(project),
      FunctionsController.provider.overrideWith(FunctionsController.new),
      runtimeListControllerProvider.overrideWith(RuntimeListController.new),
    ]);
  }
}

class _Main extends HookConsumerWidget {
  const _Main();

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final shadFormKey = useMemoized(() => GlobalKey<ShadFormState>());
    final isAutoGenerated = useState(true);
    final runtimeState = ref.watch(runtimeListControllerProvider);
    final functionState = ref.watch(FunctionsController.provider);

    ref.listen(FunctionsController.provider, (prev, next) {
      if (!next.isLoading && next.hasError) {
        toastification.show(
          title: const Text('Error creating function'),
          description: Text(next.error.toString()),
          autoCloseDuration: 3.seconds,
          type: ToastificationType.error,
        );
      }
    });

    ref.listen<AsyncValue<List<Runtime>>>(runtimeListControllerProvider,
        (prev, next) {
      if (!next.isLoading && next.hasError) {
        toastification.show(
          title: const Text('Error loading runtimes'),
          description: Text(next.error.toString()),
          autoCloseDuration: 3.seconds,
          type: ToastificationType.error,
        );
      }
    });
    return ShadForm(
      key: shadFormKey,
      child: ShadDialog(
        title: const Text('Create Function'),
        child: Container(
          width: 400,
          padding: const EdgeInsets.all(16),
          child: Column(
            children: [
              ShadInputFormField(
                id: 'id',
                label: const Text('ID'),
                enabled: !isAutoGenerated.value,
                placeholder: isAutoGenerated.value
                    ? const Text('ID.unique()')
                    : const Text('Enter an ID'),
                description: ShadCheckboxFormField(
                    id: 'autoGenerated',
                    initialValue: isAutoGenerated.value,
                    onChanged: (v) => isAutoGenerated.value = v,
                    inputLabel: const Text('Auto Generate'),
                    inputSublabel: const Text(
                      'If enabled, the ID will be auto-generated by using the ID.unique() method.',
                    )),
              ),
              const Gap(16),
              ShadInputFormField(
                id: 'name',
                label: const Text('Name'),
                placeholder: const Text("'My Function' is the default name."),
              ),
              const Gap(16),
              LayoutBuilder(builder: (context, constraints) {
                return ShadSelectFormField<Runtime>(
                  minWidth: constraints.maxWidth,
                  id: 'runtime',
                  enabled: !runtimeState.hasError || !runtimeState.isLoading,
                  validator: (value) =>
                      value == null ? 'Select a runtime' : null,
                  label: const Text('Runtime'),
                  placeholder: const Text('Select a runtime'),
                  options: [
                    ...runtimeState.when(
                        data: (value) {
                          return value
                              .map((value) => ShadOption(
                                  value: value,
                                  child:
                                      Text('${value.name} (${value.version})')))
                              .toList();
                        },
                        error: (e, stackTrace) => [
                              const Text('Error loading runtimes'),
                            ],
                        loading: () => [
                              const Text('Loading...'),
                            ]),
                  ],
                  selectedOptionBuilder: (context, value) =>
                      Text('${value.name} (${value.version})'),
                  // onSearchChanged: (v) {
                  //   ref
                  //       .read(runtimeListControllerProvider.notifier)
                  //       .searchRuntime(v);
                  // },
                );
              }),
              const Gap(16),
              ShadButton(
                  width: double.infinity,
                  enabled: !functionState.isLoading,
                  child: const Text('Create'),
                  onPressed: () {
                    if (shadFormKey.currentState!.saveAndValidate()) {
                      final data = shadFormKey.currentState!.value;
                      final project = ref.read(projectSelectedProvider);
                      ref
                          .read(FunctionsController.provider.notifier)
                          .createFunction(
                              id: data['id'] ?? ID.unique(),
                              name: data['name'] ?? 'My Function',
                              runtime: (data['runtime'] as Runtime).$id,
                              project: project,
                              onSuccess: () {
                                toastification.show(
                                  title: const Text('Function created'),
                                  description: const Text(
                                      'The function was created successfully.'),
                                  autoCloseDuration: 3.seconds,
                                  type: ToastificationType.success,
                                );
                                Navigator.of(context).pop();
                              });
                    }
                  }),
            ],
          ),
        ),
      ),
    );
  }
}
