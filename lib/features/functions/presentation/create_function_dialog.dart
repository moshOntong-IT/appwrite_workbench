import 'package:appwrite_workbench/core/appwrite_client.dart';
import 'package:appwrite_workbench/core/provider_scope_extension.dart';
import 'package:appwrite_workbench/global_providars.dart';
import 'package:appwrite_workbench/shared_controllers/runtime_list_controller.dart';
import 'package:dart_appwrite/models.dart';
import 'package:flutter/material.dart';
import 'package:flutter_hooks/flutter_hooks.dart';
import 'package:gap/gap.dart';
import 'package:hooks_riverpod/hooks_riverpod.dart';
import 'package:shadcn_ui/shadcn_ui.dart';

class CreateFunctionDialog extends ConsumerWidget {
  const CreateFunctionDialog({required this.client, super.key});

  final AppwriteClient client;

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    return const _Main().scope(overrides: [
      appwriteClientProvider.overrideWithValue(
        client,
      ),
      runtimeListControllerProvider.overrideWith(RuntimeListController.new)
    ]);
  }
}

class _Main extends HookConsumerWidget {
  const _Main();

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final shadFormKey = useMemoized(() => GlobalKey<ShadFormState>());
    final isAutoGenerated = useState(true);
    final runtimeState = ref.watch(runtimeListControllerProvider);
    return ShadForm(
      key: shadFormKey,
      child: ShadDialog(
        title: const Text('Create Function'),
        content: Container(
          width: 400,
          padding: const EdgeInsets.all(16),
          child: Column(
            children: [
              ShadInputFormField(
                id: 'id',
                label: const Text('ID'),
                description: ShadCheckboxFormField(
                    id: 'autoGenerated',
                    initialValue: isAutoGenerated.value,
                    onChanged: (v) => isAutoGenerated.value = v,
                    inputLabel: const Text('Auto Generate'),
                    inputSublabel: const Text(
                      'If enabled, the ID will be auto-generated by using the ID.unique() method.',
                    )),
              ),
              const Gap(16),
              ShadInputFormField(
                id: 'name',
                label: const Text('Name'),
                placeholder: const Text("'My Function' is the default name."),
              ),
              const Gap(16),
              ShadSelectFormField<Runtime>(
                id: 'runtime',
                enabled: !runtimeState.hasError || !runtimeState.isLoading,
                label: const Text('Runtime'),
                placeholder: const Text('Select a runtime'),
                options: [
                  ...runtimeState.when(
                      data: (value) {
                        return value
                            .map((value) => ShadOption(
                                value: value, child: Text(value.name)))
                            .toList();
                      },
                      error: (e, stackTrace) => [
                            const Text('Error loading runtimes'),
                          ],
                      loading: () => [
                            const Text('Loading...'),
                          ]),
                ],
                selectedOptionBuilder: (context, value) => Text(value.name),
                // onSearchChanged: (v) {
                //   ref
                //       .read(runtimeListControllerProvider.notifier)
                //       .searchRuntime(v);
                // },
              )
            ],
          ),
        ),
      ),
    );
  }
}
